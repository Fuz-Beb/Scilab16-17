clc ou clc(n) -> efface la console, ou à n lignes
clear ou clear var -> supprime toutes les variables ou une variable

___
TD 1 - EXERCICE 1
___

A=[1 2 3 ; 4 5 6 ; 7 8 9] = Matrice 3x3 allant de 1 à 9

A=zeros(5,5) ou A=ones(5,5) ou A=ones(5,5)+1 ou B = 2*A -> Permet de créer une matrice de 0 ou 1

C=[A zeros(5,5);zeros(5,5) B] -> Permet de créer une matrice contenant les valeurs d'autres matrices

A=C(3 : 8, 5 : 10) -> Permet de stocker dans A la sous matrice de C composée des lignes 3 à 8 et colonnes 5 à 10.

D=grand(6,6,"unf",0,1) ou D=rand(6,6) -> Permet de créer une matrice 6x6 random/aléatoire.

E=1*(D>0.5) -> créer une matrice E de taille équivalente à D, dont chaque élément (i,j)
vaut 1 si D(i,j)>0.5, et 0 sinon.

E=round(D) -> Permet d'arrondir une matrice D en mettant des 0 et 1 selon l'entier.

D*E -> Produit matriciel de D par E.

D.*E -> Permet de faire le produit de 2 matrices coefficient par coefficient (termes à termes). (Fausse matrice)

V1=D(3,:) -> Permet de créer un vecteur par rapport à la ligne 3 de la matrice D

V2=D(:,4) -> Permet de créer un vecteur par rapport à la colonne 4 de la matrice D

V1*V2, V2*V1 -> Produits matriciels de deux vecteurs

V2=V2' ou V1.*V2' -> Permet de convertir un vecteur/matrice colonne vers ligne ou ligne vers colonne.

___
TD 1 - EXERCICE 2
___

A(2,4)=24 -> Permet de mettre à 24 le coefficient ligne 2 et colonne 4.

A(3,:)=3 -> Permet de mettre tous les éléments de la troisième ligne à 3.

A(:,2)=-2 -> Permet de mettre tous les éléments de la deuxième colonne à -2

B=A([4 3 2 1],:) -> Permet de créer une matrice avec les lignes inversées

B=[A([3 4],:)' A(:,[1 4]) A([1 2],:)'] -> Créer une matrice B 4x6 dont les deux premières colonnes sont les deux dernières lignes de A, les deux dernières colonnes sont les deux premières lignes de A et les deux colonnes du milieu sont la première et la dernière colonne de A.

Petit exemple :
---------------

Soit la matrice A =
    
    1.    2.    3.   
    4.    5.    6.  
    7.    8.    9.

B=[A([1 2],:)']

    1.    4.  
    2.    5.  
    3.    6. 

B=[A([1 2],:)]

    1.    2.    3.  
    4.    5.    6.  


size(B) = 2.  3.


___
TD 1 - EXERCICE 3
___

Un système de Cramer est un système avec n équations et n inconnues. Sa matrice associé doit être inversible donc son déterminant doit être non nul.

Pour résoudre un système de Cramer, il est nécessaire de créer la première matrice (coté gauche du système), puis de créer la seconde matrice (coté droit du système), puis de faire :

x = A\b

x est matrice de même dimension que b contenant les résultats du système. A est le coté gauche, b le coté droit.


___
TD 1 - EXERCICE 5
___

// crée une matrice A nxn dont le coef Aij vaut i+j
for i=[1:n]
    for j= [1:n]
        A(i,j)=i+j;
    end
end
disp(A)



---
TD 2 - Commandes utiles
---

Fig=gcf() -> Créer une figure vide
Axes=gca() -> Création d'un pointeur pour accéder à tous les paramètres.
scf(1) -> Permet de naviguer entre les figures (se déplacer sur la 1)

plot([0 0],[-10 20]) -> Créer une droite sur un axe
[ Axe des abscisse ], [ Axes des ordonnées ]


Axes.data_bounds=[-4,-10;6,15] -> Modifier les paramètres des axes.
Axes.auto_scale= "off"

plot -> Créer un axe sur le même graphique
Fig.background=30 -> Fabrique un graphique avec des couleurs en fond
Axes.background=15

MonPolyline3 = Axes.children.children(1) -> MonPolyline3 est un alias sur la dernière figure ajoutée
MonPolyline1.line_mode=on
MonPolyline1.line_style=2

---
TD 2 - Exercice 4
---
Fig=gcf()
Axes=gca() --> Charge en mémoire les axes présent sur la fenêtre graphique
MonPolyline3 = Axes.children.children(3) -> Permet de faire un alias du 3 ème plot qui a été saisie au préalable

MonPolyline1.line_mode="on"

MonPolyline3 = Axes.children.children(1)
MonPolyline2 = Axes.children.children(2)
MonPolyline1 = Axes.children.children(3)

MonPolyline1.line_mode=on
MonPolyline1.line_style=2
MonPolyline1.thickness=3
MonPolyline1.mark_style=1

---
TD 2 -Execice 5
--- Carré
Fig=gcf()
Axes=gca()

Axes.data_bounds=[-2,-2;2,2]

plot([-1 -1],[-1 1])
plot([-1 1],[1 1])
plot([1 1],[1 -1])
plot([1 -1],[-1 -1])

TRIANGLE :

plot([-1 -1],[-1 1],'red')
plot([-1 0.5],[1 1],'red')
plot([0.5 -1],[1 -1],'red')


Supprimer un mauvais trais :

MonPoly = Axes.children.children(1)
delete(MonPoly)


MEDIANE :

plot([-1 -0.25],[1 0],'black')
plot([-1 0.5],[0 1],'black')
plot([-1 -0.25],[-1 1],'black')

MonPolyline1 = Axes.children.children(1)
MonPolyline2 = Axes.children.children(2)
MonPolyline3 = Axes.children.children(3)

MonPolyline1.line_style=2
MonPolyline2.line_style=2
MonPolyline3.line_style=2

---
TD 2 - EXERCICE 6
---
Fig=gcf()
Axes=gca()

Axes.auto_scale="off"

Axes.data_bounds=[-4,-10;6,14]
plot([-4 6],[0 0], 'blue')
plot([0 0],[-10 14], 'blue')


x=[-4:0.1:6]
y=(-3)*x+1
plot(x,y,'green')

y=x^2-4*x-5
plot(x,y)
MonPoly = Axes.children.children(1)
MonPoly.foreground=6

# Création d'une ligne
plot([-2 -2],[0 7],'red')
MonPoly.line_style=3


# Création d'un point
plot([-2 -2],[7 7],'red')
MonPoly.mark_style=9
MonPoly = Axes.children.children(1)
MonPoly.mark_size=10
MonPoly.mark_foreground=5

# Création d'un point
plot([3 3],[-8 -8],'red')
MonPoly = Axes.children.children(1)
MonPoly.mark_style=9
MonPoly.mark_size=10
MonPoly.mark_foreground=5


plot([3 3],[-8 0],'red')

___
TD 2 - bis
___
xarc(-1,1,1,2,0,360*64)

-1 = bas du cercle
1 = haut du cercle
1 = largeur du cercle
2 = hauteur du cercle
0 = cercle et non eclipse
64  = cercle


A=[1 -3 -2 6; 2 -4 3 8; -3 6 8 5]

---
TD 4 - EXERCICE 1 et 2
---
Fichier de dépendance (DialMat.sci) [FICHIER PROF] :
--
function A=DialMat(m,n)
  IntitulesLignes = [];
  for i=1:m  
      IntitulesLignes(i)='L'+string(i);
  end
  IntitulesColonnes = [];
  for j=1:n  
      IntitulesColonnes(j)='C'+string(j);
  end
  MatDefaut = [];
  for j=1:n  
      MatDefaut(1,j)='';
  end
 
  for i=2:m  
      MatDefaut=[MatDefaut;MatDefaut(1,:)];
  end

   A= evstr(x_mdialog('Votre réponse',IntitulesLignes, IntitulesColonnes,MatDefaut));
endfunction


function MessBoxMat(A)
    for i=1:size(A,1)
        s(i)="";
        for j=1:size(A,2)
            s(i)=s(i)+sprintf("%d\t\t\t",A(i,j));
        end
    end
    messagebox(s);
endfunction
--

---
Fichier pour addition matrice :
--
exec('DialMat.sci', -1)

ligne=grand(1,1,'uin',1,3)
colonne=grand(1,1,'uin',1,3)

M1=grand(ligne,colonne,'uin',1,6)
M2=grand(ligne,colonne,'uin',1,6)

disp("Faire la somme de :")
disp("Matrice A :")
disp(M1)
disp("Matrice B :")
disp(M2)

if(DialMat(ligne,colonne) == (M1 + M2)) then
    disp("Bon résultat");
    
    else
    disp("Mauvais résultat, réponse : ");
    disp(M1 + M2);
    end,
--

---
Fichier pour multiplication matrice :
--
exec('DialMat.sci', -1)

ligne=grand(1,1,'uin',1,3)
colonne=grand(1,1,'uin',1,3)

M1=grand(ligne,colonne,'uin',1,6)
M2=grand(colonne,ligne, 'uin',1,6)

disp("Faire la somme de :")
disp("Matrice A :")
disp(M1)
disp("Matrice B :")
disp(M2)

if(DialMat(ligne,ligne) == (M1 * M2)) then
    disp("Bon résultat");
    
    else
    disp("Mauvais résultat, réponse : ");
    disp(M1 * M2);
    end,
--
---
Statistiques et régressions linéaires 
---
Part 1 :
--
n=300
U1=grand(1,n,"unf",0,1);
U2=grand(1,n,"unf",0,1);
R=sqrt(-2*log(U1));
T=2*%pi*U2;
X=round(30+sqrt(60*1/3*2/3)*R.*cos(T));
moyenne=mean(X); // Permet de calculer la moyenne
ecartType=stdev(X); // Permet de calculer l'écart type
mediane=median(X); // permet de calculer la médiane/mediane

disp("Moyenne :")
disp(moyenne)

disp("Écart-type :")
disp(ecartType)

disp("Médiane :")
disp(mediane)
--
---
TD5
---
Resoudre/résolution d'un système d'équations linéaires :

2x+y=1
3x+7y=-2


A = [2 1 ; 3 7]
B = [ 1 ; -2 ]

A\B

OU plus simple

linesolve(A, B)

--

Mettre un système linéaires sous forme échelonnée
x+x-2x+4x=5
2x+2x-3x+x=3
3x+3x-4x-2x+1x=1


A=[1 2 -2 4 5 ; 2 2 -3 1 3 ; 3 3 -4 -2 1]
rref(A)

--
Exercice 9
--
Calcul de la comatrice

B=[det(A([2 3], [2 3])) -det(A([2 3] , [1 3])) det(A([2 3] , [1 2])) ; -det(A([1 3] , [2 3])) det(A([1 3] , [1 3])) -det(A([1 3] , [1 2])) ; det(A([1 2] , [2 3])) -det(A([1 2] , [1 3])) det(A([1 2] , [1 2]))]

C = [-5 -1 1 ; 2 4 -2 ; 1 -3 1]

D=1/-2 * C



---
NOTE
---
delete(MonContenaire) -> Permet de supprimer un contenaire.

subplot(2,2,2) -> permet de faire des sous graphiques sur la même figure

clf -> Efface la figure courante

MonPoly.thickness=3 -> épaiseur d'un trait / grosseur d'un trait / taille d'un trait

racine carré = sqrt(2)
